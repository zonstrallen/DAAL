import java.util.*;
import java.io.*;
import java.util.Scanner;
public class Mergesort {
int [] array;
int [] tempMergArr;
int length;
static int cnt;
static int size;
static boolean flag;
public static void main(String a[]) throws IOException{
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the number of elements to sorted: ( >5000):");
size = scanner.nextInt();
int [] inputArr = new int [size];
getRandomNumbers(inputArr);
flag = true;
cnt = 0;
// ... the code being measured for time complexity for average case ...
Mergesort mms_a = new
Mergesort(); mms_a.sort(inputArr);
PrintWriter outA = new PrintWriter(new
File("mrg_asort.txt")); for(int i:inputArr){
outA.print(i);
outA.print(" ");
}
outA.close();
System.out.println();
System.out.println("The time complexity for average case is ... " + cnt);
// ... the code being measured for time complexity for best case ...
cnt = 0;
Mergesort mms_b = new Mergesort();
mms_b.sort(inputArr);
System.out.println();
System.out.println("The time complexity for best case is ... " + cnt);
flag = false;
cnt = 0;
Mergesort mms_w = new Mergesort();
// ... the code being measured for time complexity for best case ...
mms_w.sort(inputArr);
PrintWriter outD = new PrintWriter(new
File("mrg_dsort.txt")); for(int i:inputArr){
outD.print(i);
outD.print(" ");
}
outD.close();
System.out.println();
System.out.println("The time complexity for worst case is ... " +
cnt); scanner.close();
}
public static void getRandomNumbers(int[] inputArr)throws
IOException{ Random rand = new Random();
int number, count=0;
PrintWriter out = new PrintWriter(new
File("Mrandom.txt")); while(count<size){
number=rand.nextInt(size)+1;
inputArr[count]=number;
out.print(number);
out.print(" ");
count++;
}
out.close();
System.out.println("The total numbers generated: " + count );
}
void sort(int inputArr[]) { this.array
= inputArr; this.length =
inputArr.length; this.tempMergArr
= new int[length]; doMergeSort(0,
length - 1);
}
void doMergeSort(int lowerIndex, int higherIndex)
{ if (lowerIndex < higherIndex) {
int middle = lowerIndex + (higherIndex - lowerIndex) / 2;
// Below step sorts the left side of the
array doMergeSort(lowerIndex, middle);
// Below step sorts the right side of the array
doMergeSort(middle + 1, higherIndex);
// Now merge both sides
mergeParts(lowerIndex, middle, higherIndex);
}
}
void mergeParts(int lowerIndex, int middle, int higherIndex)
{ for (int i = lowerIndex; i <= higherIndex; i++) {
tempMergArr[i] = array[i];
}
int i = lowerIndex;
int j = middle + 1;
int k = lowerIndex;
if (flag)
while (i <= middle && j <= higherIndex) {
if (tempMergArr[i] <= tempMergArr[j]) { //Sorting in Ascending
order array[k] = tempMergArr[i];
i++;
cnt++;
}
else {
array[k] =
tempMergArr[j]; j++;
cnt++;
}
k++;
}
else
while (i <= middle && j <= higherIndex) {
if (tempMergArr[i] >= tempMergArr[j]) //Sorting in descending order
{
array[k] =
tempMergArr[i]; i++;
cnt++;
} else {
array[k] =
tempMergArr[j]; j++;
cnt++;
}
k++;
}
while (i <= middle) {
array[k] =
tempMergArr[i]; k++;
i++;
}
}
}
